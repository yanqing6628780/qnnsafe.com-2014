---
layout: nil
in_sitemap: no
permalink: /assets/xml/vtourskin.xml
---
<?xml version="1.0" encoding="utf-8" ?>
%krpano
  / krpano 1.16.5 - Default Virtual Tour Skin
  / Global Skin settings (can be overridden in the 'outer' xml)
  %skin_settings{bingmaps: "false", bingmaps_key: "", bingmaps_zoombuttons: "false", controlbar_offset: "20", gyro: "true", thumbs_crop: "0|40|240|160", thumbs_dragging: "true", thumbs_height: "80", thumbs_onhoverscrolling: "false", thumbs_opened: "false", thumbs_padding: "10", thumbs_scrollbuttons: "false", thumbs_scrollindicator: "false", thumbs_text: "false", thumbs_width: "120", tooltips_hotspots: "false", tooltips_mapspots: "false", tooltips_thumbs: "false"}
  / Skin Styles
  / skin_base - the base skin image
  %style{name: "skin_base", url: "/assets/images/vtourskin.png"}
  / skin_glow - button glowing, if ondown/onup events were needed, then ondown2/onup2 need to be used instead when using this style
  %style{name: "skin_glow", ondown: "copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );", onout: "if(skin_lockglow === name, ifnot(pressed, skin_buttonglow(null);delete(skin_lockglow); ));", onover: "if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); ", onup: "if(hovering, skin_buttonglow(get(name),0.3), skin_buttonglow(null);delete(skin_lockglow); ); if(onup2, onup2() );"}
  / skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts
  %style{align: "bottom", autoheight: "true", background: "false", border: "false", css: "text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:10px;", enabled: "false", name: "skin_thumbtext_style", textshadow: "1", url: "%SWFPATH%/plugins/textfield.swf", width: "100%", y: "5"}
  / skin_hotspotstyle - style for the hotspots (note - the onclick event will be overwritten! the hotspots need to have a 'linkedscene' attribute to be clickable)
  %style{distorted: "true", edge: "top", name: "skin_hotspotstyle", onclick: "if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );", onhover: "if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );", oy: "0", scale: "0.5", url: "/assets/images/vtourskin_hotspot.png"}
  / tooltips textstyle
  %textstyle{background: "false", bold: "true", border: "false", effect: "dropshadow(1,45,0x000000,4,1);", fadeintime: "0.1", fadetime: "0.05", font: "Arial", fontsize: "16", italic: "false", name: "SKIN_TOOLTIPS", textcolor: "0xFFFFFF"}
  / Skin Layout
  %layer{align: "leftbottom", height: "100%", keep: "true", maskchildren: "true", name: "skin_scroll_window", type: "container", width: "100%", x: "0", y: "60", y_closed: "-2", y_opened: "60"}
    %layer{align: "leftbottom", height: "100%", name: "skin_scroll_layer", type: "container", width: "100%", x: "0", y: "-100%"}
      %layer{align: "topleft", crop: "2|0|60|12", edge: "bottomleft", enabled: "false", height: "12", name: "skin_topborder", style: "skin_base", width: "100%", x: "0", y: "0"}
      %layer{align: "lefttop", autoheight: "true", background: "false", border: "false", css: "text-align:left; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;", edge: "leftbottom", enabled: "false", height: "32", name: "skin_title", textshadow: "1", url: "%SWFPATH%/plugins/textfield.swf", visible: "false", width: "95%", x: "5", y: "-3", zorder: "4"}
      %layer{align: "lefttop", bgalpha: "0.5", bgcolor: "0x000000", height: "100%", maskchildren: "true", name: "skin_scroll_container", type: "container", width: "100%", x: "0", y: "0"}
        %layer{align: "lefttop", height: "100%", name: "skin_thumbs_container", type: "container", visible: "false", width: "100%"}
          %layer{align: "lefttop", alpha: "1.0", crop: "0|64|64|64", edge: "left", name: "skin_thumbs_scrollleft", ondown2: "asyncloop(pressed, layer[skin_thumbs].scrollby(+2,0));", scale: "0.5", style: "skin_base|skin_glow", visible: "false", x: "5", y: "50", zorder: "2"}
          %layer{align: "righttop", alpha: "1.0", crop: "64|64|64|64", edge: "right", name: "skin_thumbs_scrollright", ondown2: "asyncloop(pressed, layer[skin_thumbs].scrollby(-2,0));", scale: "0.5", style: "skin_base|skin_glow", visible: "false", x: "5", y: "50", zorder: "2"}
          %layer{align: "lefttop", bgalpha: "0.25", bgcolor: "0xFFFFFF", enabled: "false", height: "4", name: "skin_thumbs_scrollindicator", type: "container", visible: "false", width: "0", y: "100"}
          %layer{align: "top", alturl: "%SWFPATH%/plugins/scrollarea.js", direction: "h", height: "100", name: "skin_thumbs", onloaded: "skin_updatescroll();", onscroll: "skin_updatethumbscroll();", state: "closed", url: "%SWFPATH%/plugins/scrollarea.swf", width: "100%", zorder: "1"}
        %layer{align: "lefttop", bgalpha: "0", flash_url: "%SWFPATH%/plugins/bingmaps.swf", height: "50%", html5_url: "%SWFPATH%/plugins/bingmaps.js", lat: "0", lng: "0", maptype: "satellite", name: "skin_map", onmapready: "skin_addmapspots();", state: "closed", url: "", visible: "false", width: "100%", x: "0", y: "0", zoom: "10", zorder: "1"}
          %maptypecontrol{align: "righttop", buttonalign: "v", visible: "true", x: "5", y: "5"}
          %radar{headingoffset: "0", visible: "false"}
          %spotstyle{activeurl: "/assets/images/vtourskin_mapspotactive.png", edge: "bottom", name: "DEFAULT", scale: "0.5", url: "/assets/images/vtourskin_mapspot.png", x: "-5", y: "-8"}
          %layer{align: "right", crop: "9|512|46|64", name: "skin_map_zoom_in", ondown: "layer[skin_map].zoomin();  skin_buttonglow(get(name));", onup: "skin_buttonglow(null);", style: "skin_base", visible: "false", x: "0", y: "-40", zorder: "2"}
          %layer{align: "right", crop: "73|512|46|64", name: "skin_map_zoom_out", ondown: "layer[skin_map].zoomout(); skin_buttonglow(get(name));", onup: "skin_buttonglow(null);", style: "skin_base", visible: "false", x: "0", y: "+40", zorder: "2"}
  %layer{align: "leftbottom", bgalpha: "0.5", bgcolor: "0x000000", height: "40", keep: "true", name: "skin_control_bar", type: "container", width: "100%", x: "0", y: "20", y_closed: "-42", y_opened: "20", zorder: "3"}
    %layer{align: "bottomleft", crop: "2|52|60|12", edge: "topleft", enabled: "false", height: "12", name: "skin_btmborder", style: "skin_base", width: "100%", x: "0", y: "0"}
    %layer{align: "left", alpha: "0.5", crop: "0|64|64|64", name: "skin_btn_prev", onclick: "skin_nextscene(-1);", scale: "0.5", style: "skin_base|skin_glow", x: "5", y: "0"}
    %layer{align: "right", alpha: "0.5", crop: "64|64|64|64", name: "skin_btn_next", onclick: "skin_nextscene(+1);", scale: "0.5", style: "skin_base|skin_glow", x: "5", y: "0"}
    %layer{align: "leftbottom", crop: "0|128|64|64", name: "skin_btn_thumbs", ondown2: "skin_showmap(false); skin_showthumbs();", scale: "0.5", style: "skin_base|skin_glow", x: "50", y: "4"}
    %layer{align: "leftbottom", crop: "64|128|64|64", name: "skin_btn_map", ondown2: "skin_showthumbs(false); skin_showmap();", scale: "0.5", style: "skin_base|skin_glow", visible: "false", x: "90", y: "4"}
    %layer{align: "bottom", crop: "0|192|64|64", name: "skin_btn_lt", ondown2: "set(hlookat_moveforce,-1);", onup2: "set(hlookat_moveforce,0);", scale: "0.5", style: "skin_base|skin_glow", x: "-100", y: "4"}
    %layer{align: "bottom", crop: "64|192|64|64", name: "skin_btn_rt", ondown2: "set(hlookat_moveforce,+1);", onup2: "set(hlookat_moveforce,0);", scale: "0.5", style: "skin_base|skin_glow", x: "-60", y: "4"}
    %layer{align: "bottom", crop: "0|256|64|64", name: "skin_btn_up", ondown2: "set(vlookat_moveforce,-1);", onup2: "set(vlookat_moveforce,0);", scale: "0.5", style: "skin_base|skin_glow", x: "-20", y: "4"}
    %layer{align: "bottom", crop: "64|256|64|64", name: "skin_btn_dn", ondown2: "set(vlookat_moveforce,+1);", onup2: "set(vlookat_moveforce,0);", scale: "0.5", style: "skin_base|skin_glow", x: "+20", y: "4"}
    %layer{align: "bottom", crop: "0|320|64|64", name: "skin_btn_in", ondown2: "set(fov_moveforce,-1);", onup2: "set(fov_moveforce,0);", scale: "0.5", style: "skin_base|skin_glow", x: "+60", y: "4"}
    %layer{align: "bottom", crop: "64|320|64|64", name: "skin_btn_ou", ondown2: "set(fov_moveforce,+1);", onup2: "set(fov_moveforce,0);", scale: "0.5", style: "skin_base|skin_glow", x: "+100", y: "4"}
    %layer{align: "bottom", crop: "0|384|64|64", devices: "html5", name: "skin_btn_gyro", onclick: "switch(plugin[skin_gyro].enabled);", ondown2: "skin_showmap(false);", scale: "0.5", style: "skin_base|skin_glow", visible: "false", x: "140", y: "4"}
    %layer{align: "bottom", crop: "0|576|64|64", devices: "fullscreensupport", name: "skin_btn_fs", onclick: "switch(fullscreen);", scale: "0.5", style: "skin_base|skin_glow", x: "140", y: "4"}
    %layer{align: "right", crop: "0|448|64|64", name: "skin_btn_hide", onclick: "skin_hideskin()", scale: "0.5", style: "skin_base|skin_glow", x: "50", y: "0"}
    %layer{align: "right", alpha: "0", crop: "64|448|64|64", name: "skin_btn_show", onclick: "skin_showskin()", scale: "0.5", style: "skin_base|skin_glow", visible: "false", x: "5", y: "-36"}
  %layer{align: "center", autoheight: "true", background: "false", border: "false", css: "text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:22px; font-style:italic;", enabled: "false", html: "loading...", keep: "true", name: "skin_loadingtext", textshadow: "2", url: "%SWFPATH%/plugins/textfield.swf", visible: "false", x: "5", y: "-5"}
  %layer{align: "center", alpha: "0.0", crop: "64|384|64|64", enabled: "false", keep: "true", name: "skin_buttonglow", style: "skin_base", visible: "false", x: "0", y: "1"}
  %layer{align: "lefttop", enabled: "false", keep: "true", name: "skin_thumbborder", ox: "-2", oy: "-2", scale: "0.5", url: "/assets/images/vtourskin_thumbborder.png", visible: "false"}
  %layer{accuracy: "1", align: "righttop", capture: "false", keep: "true", name: "skin_logo", onclick: "if(state == 'small', skin_openlogo(); , skin_closelogo('now'); opened_onclick(); );", state: "small", url: "", x: "5", y: "5"}
  %plugin{camroll: "true", devices: "html5+!firefox+!android", enabled: "false", friction: "0", html5_url: "%SWFPATH%/plugins/gyro.js", keep: "true", name: "skin_gyro", onavailable: "if(device.fullscreensupport, if(device.mobile,add(layer[skin_btn_gyro].x,40),add(layer[skin_btn_gyro].x,20));); set(layer[skin_btn_gyro].visible,true);", url: "", velastic: "0"}
  / Skin Events
  %events{keep: "true", name: "skin_events", onloadcomplete: "skin_showloading(false);", onnewpano: "skin_showloading(true); skin_update_scene_infos();", onremovepano: "skin_showloading(true);", onresize: "skin_onresize();", onxmlcomplete: "set(events[skin_events].onxmlcomplete,null); skin_startup();"}
  %events{devices: "fullscreensupport", name: "skin_events", onenterfullscreen: "set(layer[skin_btn_fs].crop, '64|576|64|64');", onexitfullscreen: "set(layer[skin_btn_fs].crop, '0|576|64|64');"}
  / Alternative small screen layout for mobile devices (override/extend settings)
  %krpano{devices: "mobile"}
    %layer{name: "skin_scroll_window", y: "64", y_closed: "-4", y_opened: "64"}
      %layer{name: "skin_scroll_layer"}
        %layer{height: "24", name: "skin_topborder"}
        %layer{css: "text-align:left; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:26px;", name: "skin_title"}
        %layer{name: "skin_scroll_container"}
          %layer{name: "skin_thumbs_container"}
            %layer{name: "skin_thumbs_scrollleft", scale: "1"}
            %layer{name: "skin_thumbs_scrollright", scale: "1"}
            %layer{height: "6", name: "skin_thumbs_scrollindicator"}
            %layer{height: "200", name: "skin_thumbs"}
          %layer{name: "skin_map"}
            %maptypecontrol{scale: "1.5"}
    %layer{height: "64", name: "skin_control_bar", y: "0", y_closed: "-68", y_opened: "0"}
      %layer{name: "skin_btmborder", visible: "false"}
      %layer{align: "left", name: "skin_btn_prev", scale: "1", x: "0", y: "0"}
      %layer{align: "left", name: "skin_btn_next", scale: "1", x: "80", y: "0"}
      %layer{align: "left", name: "skin_btn_thumbs", scale: "1", x: "160", y: "0"}
      %layer{align: "left", name: "skin_btn_map", scale: "1", x: "240", y: "0"}
      %layer{name: "skin_btn_lt", visible: "false"}
      %layer{name: "skin_btn_rt", visible: "false"}
      %layer{name: "skin_btn_up", visible: "false"}
      %layer{name: "skin_btn_dn", visible: "false"}
      %layer{name: "skin_btn_in", visible: "false"}
      %layer{name: "skin_btn_ou", visible: "false"}
      %layer{align: "left", name: "skin_btn_gyro", scale: "1", x: "320", y: "0"}
      %layer{align: "left", name: "skin_btn_fs", scale: "1", x: "320", y: "0"}
      %layer{name: "skin_btn_hide", scale: "1", x: "5"}
      %layer{name: "skin_btn_show", scale: "1", x: "0", y: "-58"}
    %layer{css: "text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-style:italic; font-size:44px;", name: "skin_loadingtext"}
    %layer{name: "skin_buttonglow", scale: "2.0"}
    %layer{name: "skin_thumbborder", scale: "1"}
    %style{css: "text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:20px;", name: "skin_thumbtext_style"}
  / Additional layout changes for Android Flashplayer Mobiles - different fullscreen button layout, zooming buttons, smaller loading text size
  %krpano{devices: "mobile+android+flash"}
    %layer{name: "skin_scroll_window"}
      %layer{name: "skin_scroll_layer"}
        %layer{css: "text-align:left; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:20px;", name: "skin_title", width: "100%"}
    %layer{name: "skin_control_bar"}
      %layer{align: "right", name: "skin_btn_fs", scale: "1", x: "70", y: "0"}
      %layer{name: "skin_btn_show", x: "-10", y: "-40"}
    %layer{css: "text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-style:italic; font-size:30px;", name: "skin_loadingtext"}
    %layer{align: "right", height: "160", keep: "true", name: "skin_androidzoom_buttons", type: "container", width: "60"}
      %layer{align: "center", crop: "9|512|46|64", effect: "glow(0,0.5);", name: "skin_androidzoom_in", ondown: "if(layer[skin_map].state == 'closed',set(fov_moveforce,-1));skin_buttonglow(get(name));", onup: "if(layer[skin_map].state == 'closed',set(fov_moveforce,0),layer[skin_map].zoomin());skin_buttonglow(null);", style: "skin_base", x: "0", y: "-40", zorder: "2"}
      %layer{align: "center", crop: "73|512|46|64", effect: "glow(0,0.5);", name: "skin_androidzoom_out", ondown: "if(layer[skin_map].state == 'closed',set(fov_moveforce,+1));skin_buttonglow(get(name));", onup: "if(layer[skin_map].state == 'closed',set(fov_moveforce,0),layer[skin_map].zoomout());skin_buttonglow(null);", style: "skin_base", x: "0", y: "+40", zorder: "2"}
  / Skin Actions
  %action{name: "skin_startup"}
    if(device.mobile == false,
    copy(layer[skin_control_bar].y, skin_settings.controlbar_offset);
    copy(layer[skin_control_bar].y_opened, skin_settings.controlbar_offset);
    add(layer[skin_scroll_window].y, layer[skin_control_bar].height, layer[skin_control_bar].y);
    add(layer[skin_scroll_window].y_opened, layer[skin_control_bar].height, layer[skin_control_bar].y_opened);
    
    if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );
    
    copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);
    
    if(skin_settings.thumbs_onhoverscrolling,
    ifnot(device.touchdevice, set(layer[skin_thumbs].draggable, false));
    set(layer[skin_thumbs].onhover_autoscrolling, true);
    );
    );
    
    if(device.android, if(device.flash, set(skin_settings.bingmaps_zoombuttons, false); ));
    
    skin_addthumbs();
    skin_onresize();
    skin_updatescroll();
    
    copy(usegyro, skin_settings.gyro);
    if(device.desktop, set(usegyro, false));
    if(device.flash, set(usegyro, false));
    if(usegyro, copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url); );
    
    if(skin_settings.bingmaps == true,
    set(layer[skin_btn_map].visible, true);
    copy(layer[skin_map].key, skin_settings.bingmaps_key);
    copy(layer[skin_map_zoom_in].visible,  skin_settings.bingmaps_zoombuttons);
    copy(layer[skin_map_zoom_out].visible, skin_settings.bingmaps_zoombuttons);
    if(device.flash, copy(layer[skin_map].url, layer[skin_map].flash_url), copy(layer[skin_map].url, layer[skin_map].html5_url) );
    ,
    if(device.mobile, copy(layer[skin_btn_gyro].x, layer[skin_btn_map].x) );
    );
  %action{name: "skin_addthumbs"}
    copy(thumbwidth, skin_settings.thumbs_width);
    copy(thumbheight, skin_settings.thumbs_height);
    copy(thumbpadding, skin_settings.thumbs_padding);
    copy(thumbcrop, skin_settings.thumbs_crop);
    
    if(device.mobile,
    mul(thumbwidth,2);
    mul(thumbheight,2);
    mul(thumbpadding,2);
    );
    
    add(thumbxoffset, thumbwidth, thumbpadding);
    mul(thumbxcenter, thumbxoffset, 0.5);
    mul(thumbbarwidth, thumbxoffset, scene.count);
    add(thumbbarwidth, thumbpadding);
    add(thumbbarheight, thumbpadding, thumbheight);
    add(thumbbarheight, thumbpadding);
    
    if (skin_settings.thumbs_scrollindicator,
    copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
    add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
    );
    
    copy(layer[skin_thumbs].height, thumbbarheight);
    copy(layer[skin_thumbs].width, thumbbarwidth);
    
    mul(halfheight, thumbbarheight, 0.5);
    copy(layer[skin_thumbs_scrollleft].y, halfheight);
    copy(layer[skin_thumbs_scrollright].y, halfheight);
    
    for(set(i,0), i LT scene.count, inc(i),
    txtadd(thumbname,'skin_thumb_',get(i));
    addlayer(get(thumbname));
    copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
    set(layer[get(thumbname)].keep, true);
    set(layer[get(thumbname)].parent, 'skin_thumbs');
    set(layer[get(thumbname)].align, lefttop);
    copy(layer[get(thumbname)].crop, thumbcrop);
    copy(layer[get(thumbname)].width, thumbwidth);
    copy(layer[get(thumbname)].height, thumbheight);
    mul(thumbx, i, thumbxoffset);
    add(thumbx, thumbpadding);
    copy(layer[get(thumbname)].x, thumbx);
    copy(layer[get(thumbname)].y, thumbpadding);
    add(scene[get(i)].thumbx, thumbx, thumbxcenter);
    copy(scene[get(i)].thumby, thumbpadding);
    set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
    set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); loadscene(get(linkedscene), null, MERGE, BLEND(0.5)); );
    if(skin_settings.tooltips_thumbs,
    set(layer[get(thumbname)].onhover, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS); );
    );
    if(skin_settings.thumbs_text,
    txtadd(thumbtext, 'skin_thumbtext_', get(i));
    addlayer(get(thumbtext));
    layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
    set(layer[get(thumbtext)].keep, true);
    set(layer[get(thumbtext)].parent, get(thumbname));
    set(layer[get(thumbtext)].html, get(scene[get(i)].title));
    );
    );
  %action{name: "skin_addmapspots"}
    for(set(i,0), i LT scene.count, inc(i),
    if(scene[get(i)].lat,
    txtadd(spotname, 'spot', get(i));
    txtadd(spotclickevent, 'activatespot(',get(spotname),'); loadscene(', get(scene[get(i)].name), ',null,MERGE,BLEND(1)); skin_updatescroll(); delayedcall(0.5,skin_showmap(false));');
    copy(scene[get(i)].mapspotname, spotname);
    if(skin_settings.tooltips_mapspots, escape(spottitle,get(scene[get(i)].title)); txtadd(spothoverevent,'showtext(',get(spottitle),',SKIN_TOOLTIPS)'); , set(spothoverevent,null); );
    
    addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), get(spothoverevent));
    );
    );
    activatespot(spot0);
    zoomToSpotsExtent();
  %action{name: "skin_onresize"}
    mul(mh, stageheight, -1);
    if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
    if(layer[skin_map].state == 'opened', sub(hh,stageheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); copy(layer[skin_map].height, hh); add(mh,hh); );
    set(layer[skin_scroll_layer].y, get(mh));
    ifnot(device.mobile, if(stagewidth LT 480, skin_showbuttons(false), skin_showbuttons(true)); );
  %action{name: "skin_showbuttons"}
    set(layer[skin_btn_lt].visible, %1);
    set(layer[skin_btn_rt].visible, %1);
    set(layer[skin_btn_up].visible, %1);
    set(layer[skin_btn_dn].visible, %1);
    set(layer[skin_btn_in].visible, %1);
    set(layer[skin_btn_ou].visible, %1);
    if(%1 == true,
    if(plugin[skin_gyro].available == true, set(layer[skin_btn_gyro].visible, %1) );
    if(device.fullscreensupport, set(layer[skin_btn_fs].visible, %1) );
    ,
    set(layer[skin_btn_gyro].visible, %1);
    set(layer[skin_btn_fs].visible, %1);
    );
  %action{name: "skin_updatescroll"}
    if(layer[skin_thumbs].loaded,
    set(cursceneindex, 0);
    if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
    layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
    );
  %action{name: "skin_updatethumbscroll"}
    copy(padding,skin_settings.thumbs_padding);
    if(device.mobile, mul(padding,2));
    
    if(skin_settings.thumbs_scrollbuttons,
    if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
    if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
    );
    
    if(skin_settings.thumbs_scrollindicator,
    if(woverflow GT 0,
    set(layer[skin_thumbs_scrollindicator].visible,true);
    sub(iw,pixelwidth,woverflow);
    div(pw,iw,pixelwidth);
    div(px,loverflow,woverflow);
    mul(pw,iw);
    copy(layer[skin_thumbs_scrollindicator].width,pw);
    sub(iw,pw);
    sub(iw,padding);
    sub(iw,padding);
    mul(px,iw);
    add(px,padding);
    copy(layer[skin_thumbs_scrollindicator].x,px);
    ,
    set(layer[skin_thumbs_scrollindicator].visible,false);
    );
    );
  %action{name: "skin_update_scene_infos"}
    if(xml.scene !== null,
    if(scene[get(xml.scene)].index GE 0,
    if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
    delayedcall(0.1, set(layer[skin_title].visible,true) );
    
    if(scene[get(xml.scene)].index GT 0,
    set(layer[skin_btn_prev].enabled, true);
    set(layer[skin_btn_prev].alpha, 1.0);
    ,
    set(layer[skin_btn_prev].enabled, false);
    set(layer[skin_btn_prev].alpha, 0.3);
    );
    
    sub(lastsceneindex, scene.count, 1);
    if(scene[get(xml.scene)].index LT lastsceneindex,
    set(layer[skin_btn_next].enabled, true);
    set(layer[skin_btn_next].alpha, 1.0);
    ,
    set(layer[skin_btn_next].enabled, false);
    set(layer[skin_btn_next].alpha, 0.3);
    );
    
    txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(scene[get(xml.scene)].index));
    set(layer[skin_thumbborder].visible, true);
    
    if(scene[get(xml.scene)].mapspotname,
    layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
    layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
    );
    );
    );
  %action{name: "skin_nextscene"}
    add(newsceneindex, scene[get(xml.scene)].index, %1);
    if(newsceneindex GE 0,
    if(newsceneindex LT scene.count,
    txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
    layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
    loadscene(get(scene[get(newsceneindex)].name), null, MERGE, BLEND(0.5));
    );
    );
  %action{name: "skin_nextscene_loop"}
    add(newsceneindex, scene[get(xml.scene)].index, %1);
    sub(lastsceneindex, scene.count, 1);
    if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
    if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
    layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
    loadscene(get(scene[get(newsceneindex)].name), null, MERGE, BLEND(0.5));
  %action{name: "skin_showloading"}
    set(layer[skin_loadingtext].visible, %1);
  %action{name: "skin_buttonglow"}
    if(%1 != null,
    set(strength,0.7);
    if(%2 != null, set(strength,%2));
    set(layer[skin_buttonglow].parent, %1);
    set(layer[skin_buttonglow].visible, true);
    tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
    ,
    tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow].parent, null); set(layer[skin_buttonglow].visible, false); );
    );
  %action{name: "skin_hideskin"}
    if(layer[skin_map].state != 'closed', skin_showmap(false); wait(0.4); );
    if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );
    tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_closed), 0.5, easeOutQuint);
    tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_closed), 0.5, easeOutQuint);
    set(layer[skin_btn_show].visible,true);
    tween(layer[skin_btn_show].alpha, 1, 0.25, easeOutQuint);
  %action{name: "skin_showskin"}
    tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_opened), 0.5, easeOutQuint);
    tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_opened), 0.5, easeOutQuint);
    set(layer[skin_btn_show].visible,false);
    tween(layer[skin_btn_show].alpha,0,0);
  %action{name: "skin_showthumbs"}
    if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
    mul(mh, layer[skin_scroll_layer].pixelheight, -1);
    if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
    if(show,
    set(layer[skin_thumbs].state, 'opened');
    add(mh, layer[skin_thumbs].height);
    tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
    set(layer[skin_thumbs_container].visible, true);
    tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
    tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
    ,
    set(layer[skin_thumbs].state, 'closed');
    tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
    );
  %action{name: "skin_showmap"}
    if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
    mul(mh, layer[skin_scroll_layer].pixelheight, -1);
    if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
    if(show,
    tween(layer[skin_logo].alpha, 0.0, 0.25, default, set(layer[skin_logo].visible,false));
    tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));
    set(layer[skin_map].visible, true);
    tween(layer[skin_map].alpha, 1.0, 0.25);
    set(layer[skin_map].state, 'opened');
    sub(hh,stageheight,skin_settings.controlbar_offset);
    sub(hh,layer[skin_control_bar].height);
    sub(hh,32);
    add(mh,hh);
    copy(layer[skin_map].height, hh);
    tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
    ,
    set(layer[skin_map].state, 'closed');
    set(layer[skin_logo].visible, true); tween(layer[skin_logo].alpha, 1.0, 0.25);
    tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
    );
  %action{name: "skin_openlogo"}
    if(layer[skin_logo].state == 'small',
    set(layer[skin_logo].state, 'opening');
    copy(backup_logo_align, layer[skin_logo].align);
    copy(backup_logo_x, layer[skin_logo].x);
    copy(backup_logo_y, layer[skin_logo].y);
    copy(backup_logo_scale, layer[skin_logo].scale);
    layer[skin_logo].changeorigin(center);
    tween(layer[skin_logo].x, 0, 0.5, easeOutQuint);
    tween(layer[skin_logo].y, 0, 0.5, easeOutQuint);
    tween(layer[skin_logo].scale, 1, 0.5, easeOutQuint);
    delayedcall(0.5, set(layer[skin_logo].state, 'opened') );
    delayedcall(0, set(events[skin_events].onmouseup, delayedcall(0, skin_closelogo()) ) );
    );
  %action{name: "skin_closelogo"}
    if(layer[skin_logo].state == 'opened',
    set(layer[skin_logo].state, 'closing');
    layer[skin_logo].changeorigin(get(backup_logo_align));
    if(%1 == 'now',
    stoptween(layer[skin_logo].x, layer[skin_logo].y, layer[skin_logo].scale);
    copy(layer[skin_logo].x, backup_logo_x);
    copy(layer[skin_logo].y, backup_logo_y);
    copy(layer[skin_logo].scale, backup_logo_scale);
    set(layer[skin_logo].state, 'small');
    ,
    tween(layer[skin_logo].x, get(backup_logo_x), 0.5, easeOutQuint);
    tween(layer[skin_logo].y, get(backup_logo_y), 0.5, easeOutQuint);
    tween(layer[skin_logo].scale, get(backup_logo_scale), 0.5, easeOutQuint);
    delayedcall(0.5, set(layer[skin_logo].state, 'small'));
    );
    set(events[skin_events].onmouseup, null);
    );
